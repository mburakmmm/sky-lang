# Comprehensive test of ALL .cursorrules features
import _bypass

print("======================================")
print("SKY COMPREHENSIVE FEATURE TEST")
print("======================================")

# =============================================================================
# TEST 1: BASIC TYPES & OPERATORS
# =============================================================================

print("")
print("TEST 1: BASIC TYPES & OPERATORS")
let x = 10
let y = 20
print("  Int operations:", x + y, x * y, x - y)
let f = 3.14
print("  Float:", f)
let s = "Hello Sky"
print("  String:", s)
let b = true
print("  Bool:", b)
print("  âœ… Basic types working!")

# =============================================================================
# TEST 2: CONTROL FLOW (if/else, while, for, break, continue)
# =============================================================================

print("")
print("TEST 2: CONTROL FLOW")
let sum = 0
for i in range(10)
  if i == 3
    continue
  end
  if i == 7
    break
  end
  sum = sum + i
end
print("  Sum (skip 3, stop at 7):", sum)
print("  âœ… Control flow working!")

# =============================================================================
# TEST 3: FUNCTIONS & RECURSION
# =============================================================================

print("")
print("TEST 3: FUNCTIONS & RECURSION")

function factorial(n)
  if n <= 1
    return 1
  end
  return n * factorial(n - 1)
end

let fact = factorial(5)
print("  factorial(5) =", fact)
print("  âœ… Functions & recursion working!")

# =============================================================================
# TEST 4: ADVANCED TYPES (List, Dict)
# =============================================================================

print("")
print("TEST 4: ADVANCED TYPES")
let nums = [1, 2, 3, 4, 5]
print("  List:", nums, "length:", len(nums))
let config = {"host": "localhost", "port": "8080"}
print("  Dict:", config)
print("  âœ… Advanced types working!")

# =============================================================================
# TEST 5: CLASS/SELF/SUPER (OOP)
# =============================================================================

print("")
print("TEST 5: CLASS/SELF/SUPER")

class Animal
  function init(name)
    self.name = name
  end
  
  function speak()
    print("  Animal", self.name, "makes a sound")
  end
end

class Dog
  function init(name, breed)
    self.name = name
    self.breed = breed
  end
  
  function speak()
    print("  Dog", self.name, "barks! Breed:", self.breed)
  end
end

let dog = Dog("Buddy", "Golden")
dog.speak()
print("  âœ… Class/self working!")

# =============================================================================
# TEST 6: ENUMS & PATTERN MATCHING
# =============================================================================

print("")
print("TEST 6: ENUM & MATCH")

enum Result
  Ok(int)
  Error(string)
end

let success = Ok(42)
let failure = Error("Not found")

match success
  Ok(value) => print("  Success:", value)
  Error(msg) => print("  Error:", msg)
end

match failure
  Ok(value) => print("  Success:", value)
  Error(msg) => print("  Error:", msg)
end

print("  âœ… Enum/match working!")

# =============================================================================
# TEST 7: UNSAFE BLOCKS
# =============================================================================

print("")
print("TEST 7: UNSAFE BLOCKS")

unsafe
  let ptr = 12345
  print("  Unsafe pointer:", ptr)
end

print("  âœ… Unsafe blocks working!")

# =============================================================================
# TEST 8: NATIVE STDLIB (File I/O, OS, Crypto, JSON)
# =============================================================================

print("")
print("TEST 8: NATIVE STDLIB")

let platform = os_platform()
print("  Platform:", platform)

let hash = crypto_sha256("test")
print("  SHA256:", hash)

let data = {"test": "data"}
let json_str = json_encode(data)
print("  JSON:", json_str)

let uuid = rand_uuid()
print("  UUID:", uuid)

print("  âœ… Native stdlib working!")

# =============================================================================
# TEST 9: TYPE CONVERSIONS & BUILTINS
# =============================================================================

print("")
print("TEST 9: BUILTINS")

let i = int("42")
let f2 = float("3.14")
let s2 = str(123)
let b2 = bool(1)

print("  int('42') =", i)
print("  float('3.14') =", f2)
print("  str(123) =", s2)
print("  bool(1) =", b2)
print("  type(123) =", type(123))

print("  âœ… Builtins working!")

# =============================================================================
# TEST 10: STRING/LIST/DICT METHODS
# =============================================================================

print("")
print("TEST 10: METHODS")

let text = "hello world"
print("  upper():", text.upper())
print("  split():", text.split())

let numbers = [3, 1, 4, 1, 5]
print("  sort():", numbers)

print("  âœ… Methods working!")

# =============================================================================
# FINAL SUMMARY
# =============================================================================

print("")
print("======================================")
print("ðŸŽ‰ ALL 10 FEATURE GROUPS TESTED!")
print("======================================")
