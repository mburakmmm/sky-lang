# SKY Programlama Dili - Komplike Test
# Tüm çalışan dil özelliklerini test eder

const MAX_VALUE = 1000
let globalSum = 0

# ============================================
# 2. Recursive fonksiyonlar
# ============================================
function fibonacci(n: int): int
  if n <= 1
    return n
  end
  return fibonacci(n - 1) + fibonacci(n - 2)
end

# ============================================
# 3. Higher-order fonksiyonlar
# ============================================
function map(list, fn)
  let result = []
  for item in list
    result.append(fn(item))
  end
  return result
end

function filter(list, predicate)
  let result = []
  for item in list
    if predicate(item)
      result.append(item)
    end
  end
  return result
end

function reduce(list, fn, initial)
  let acc = initial
  for item in list
    acc = fn(acc, item)
  end
  return acc
end

# ============================================
# 4. Nested functions ve closures
# ============================================
function makeCounter(start: int)
  let count = start
  
  function increment
    count = count + 1
    return count
  end
  
  function decrement
    count = count - 1
    return count
  end
  
  function getCount
    return count
  end
  
  return increment
end

# ============================================
# 5. Complex data structures
# ============================================
function createPerson(name, age, hobbies)
  return {
    "name": name,
    "age": age,
    "hobbies": hobbies,
    "isAdult": age >= 18
  }
end

# ============================================
# 6. Sorting algorithm (quicksort)
# ============================================
function quicksort(arr)
  if len(arr) <= 1
    return arr
  end
  
  let pivot = arr[0]
  let less = []
  let equal = []
  let greater = []
  
  for item in arr
    if item < pivot
      less.append(item)
    elif item == pivot
      equal.append(item)
    else
      greater.append(item)
    end
  end
  
  # Recursive sorting
  let sortedLess = quicksort(less)
  let sortedGreater = quicksort(greater)
  
  # Combine results
  let result = sortedLess
  for item in equal
    result.append(item)
  end
  for item in sortedGreater
    result.append(item)
  end
  
  return result
end

# ============================================
# 7. Mathematical operations
# ============================================
function isPrime(n: int): bool
  if n <= 1
    return false
  end
  
  if n <= 3
    return true
  end
  
  if n % 2 == 0
    return false
  end
  
  let i = 3
  while i * i <= n
    if n % i == 0
      return false
    end
    i = i + 2
  end
  
  return true
end

function findPrimes(max: int)
  let primes = []
  for i in range(max)
    if isPrime(i)
      primes.append(i)
    end
  end
  return primes
end

# ============================================
# 8. String manipulation
# ============================================
function reverseString(s: string): string
  # Basit reverse (character-level olmamasına rağmen)
  let result = ""
  # String manipulation placeholder
  return s
end

# ============================================
# 9. Nested control structures
# ============================================
function complexLogic(x: int, y: int, z: int): int
  let result = 0
  
  if x > 0
    if y > 0
      if z > 0
        result = x + y + z
      else
        result = x + y
      end
    else
      if z > 0
        result = x + z
      else
        result = x
      end
    end
  else
    if y > 0
      result = y
    elif z > 0
      result = z
    else
      result = 0
    end
  end
  
  return result
end

# ============================================
# 10. Pattern matching simulation
# ============================================
function match(value, patterns)
  for pattern in patterns
    let key = pattern["key"]
    let action = pattern["action"]
    
    if value == key
      return action(value)
    end
  end
  return 0
end

# ============================================
# 11. Main test function
# ============================================
function main
  print("╔══════════════════════════════════════════════════════════╗")
  print("║        SKY PROGRAMLAMA DİLİ - KOMPLİKE TEST             ║")
  print("╚══════════════════════════════════════════════════════════╝")
  print("")
  
  # Test 1: Fibonacci (recursive)
  print("Test 1: Fibonacci(10)")
  let fib10 = fibonacci(10)
  print("  Result: " + fib10)
  
  # Test 2: Prime numbers
  print("")
  print("Test 2: Prime numbers up to 30")
  let primes = findPrimes(30)
  print("  Count: " + len(primes))
  
  # Test 3: Higher-order functions
  print("")
  print("Test 3: Higher-order functions")
  let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  
  # Map: double all numbers
  let doubled = map(numbers, function(x) => x * 2)
  print("  Doubled first 3: " + doubled[0] + ", " + doubled[1] + ", " + doubled[2])
  
  # Filter: only even numbers
  let evens = filter(numbers, function(x) => x % 2 == 0)
  print("  Even count: " + len(evens))
  
  # Reduce: sum all
  let sum = reduce(numbers, function(a, b) => a + b, 0)
  print("  Sum 1-10: " + sum)
  
  # Test 4: Quicksort
  print("")
  print("Test 4: Quicksort")
  let unsorted = [64, 34, 25, 12, 22, 11, 90, 88, 45, 50]
  let sorted = quicksort(unsorted)
  print("  Sorted first 3: " + sorted[0] + ", " + sorted[1] + ", " + sorted[2])
  print("  Sorted last 3: " + sorted[7] + ", " + sorted[8] + ", " + sorted[9])
  
  # Test 5: Closure
  print("")
  print("Test 5: Closures")
  let counter = makeCounter(100)
  let val1 = counter()
  let val2 = counter()
  let val3 = counter()
  print("  Counter: " + val1 + ", " + val2 + ", " + val3)
  
  # Test 6: Complex data structures
  print("")
  print("Test 6: Complex data structures")
  let person = createPerson("Alice", 25, ["coding", "reading"])
  print("  Person name: " + person["name"])
  print("  Person age: " + person["age"])
  
  # Test 7: Nested logic
  print("")
  print("Test 7: Nested control structures")
  let result1 = complexLogic(10, 20, 30)
  print("  complexLogic(10, 20, 30) = " + result1)
  
  let result2 = complexLogic(-5, 10, -3)
  print("  complexLogic(-5, 10, -3) = " + result2)
  
  # Test 8: Pattern matching simulation
  print("")
  print("Test 8: Pattern matching")
  let patterns = [
    {"key": 1, "action": function(x) => x * 100},
    {"key": 2, "action": function(x) => x * 200},
    {"key": 3, "action": function(x) => x * 300}
  ]
  let matched = match(2, patterns)
  print("  Match result for 2: " + matched)
  
  # Test 9: Arithmetic stress test
  print("")
  print("Test 9: Arithmetic operations")
  let a = 100
  let b = 50
  print("  " + a + " + " + b + " = " + (a + b))
  print("  " + a + " - " + b + " = " + (a - b))
  print("  " + a + " * " + b + " = " + (a * b))
  print("  " + a + " / " + b + " = " + (a / b))
  print("  " + a + " % " + b + " = " + (a % b))
  
  # Test 10: Boolean logic
  print("")
  print("Test 10: Boolean logic")
  let t = true
  let f = false
  print("  true && false = " + (t && f))
  print("  true || false = " + (t || f))
  print("  !true = " + (!t))
  print("  10 > 5 = " + (10 > 5))
  print("  10 < 5 = " + (10 < 5))
  print("  10 == 10 = " + (10 == 10))
  
  # Final
  print("")
  print("╔══════════════════════════════════════════════════════════╗")
  print("║              TÜMTESTLER BAŞARILI! ✅                     ║")
  print("╚══════════════════════════════════════════════════════════╝")
end

