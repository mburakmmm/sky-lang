{
  "name": "SKY",
  "scopeName": "source.sky",
  "fileTypes": ["sky"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#functions" },
    { "include": "#classes" },
    { "include": "#operators" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.sky",
          "match": "#.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.sky",
          "match": "\\b(if|else|elif|while|for|in|break|continue|return|match)\\b"
        },
        {
          "name": "keyword.declaration.sky",
          "match": "\\b(function|class|enum|let|const|import)\\b"
        },
        {
          "name": "keyword.other.sky",
          "match": "\\b(async|await|coop|yield|unsafe|self|super|end)\\b"
        },
        {
          "name": "constant.language.sky",
          "match": "\\b(true|false|nil)\\b"
        },
        {
          "name": "storage.type.sky",
          "match": "\\b(int|float|string|bool|any)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sky",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.sky",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.sky",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.sky",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.sky",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.sky",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.hex.sky",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.sky",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        },
        {
          "name": "support.function.builtin.sky",
          "match": "\\b(print|len|range|int|float|str|bool|type|isinstance|input|sum|map|filter|any|all)\\b"
        },
        {
          "name": "support.function.stdlib.sky",
          "match": "\\b(fs_|os_|crypto_|json_|time_|rand_)[a-zA-Z_]+\\b"
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "entity.name.type.class.sky",
          "match": "(?<=class\\s+)[A-Z][a-zA-Z0-9_]*"
        },
        {
          "name": "entity.name.type.enum.sky",
          "match": "(?<=enum\\s+)[A-Z][a-zA-Z0-9_]*"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.sky",
          "match": "\\+|\\-|\\*|\\/|%|\\*\\*"
        },
        {
          "name": "keyword.operator.comparison.sky",
          "match": "==|!=|<|<=|>|>="
        },
        {
          "name": "keyword.operator.logical.sky",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment.sky",
          "match": "=|\\+=|\\-=|\\*=|\\/=|%="
        },
        {
          "name": "keyword.operator.arrow.sky",
          "match": "=>"
        }
      ]
    }
  }
}

