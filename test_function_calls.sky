# SKY Fonksiyon Çağırma Testleri

# 1. Basit fonksiyon çağırma
function hello
  print("Merhaba!")
end

# 2. Parametreli fonksiyon çağırma
function greet(name)
  print("Merhaba " + name)
end

# 3. Çoklu parametreli fonksiyon
function add(a, b): int
  return a + b
end

# 4. Nested fonksiyon çağırma
function outer
  function inner
    print("İç fonksiyon")
  end
  inner()
end

# 5. Recursive fonksiyon çağırma
function factorial(n): int
  if n <= 1
    return 1
  else
    return n * factorial(n - 1)
  end
end

# 6. Fonksiyon döndüren fonksiyon
function get_multiplier(factor): any
  function multiply(x): int
    return x * factor
  end
  return multiply
end

# 7. Built-in fonksiyon çağırma
function test_builtins
  let numbers = [1, 2, 3, 4, 5]
  print("Length: " + str(len(numbers)))
  print("Sum: " + str(sum(numbers)))
end

# 8. String metodları
function test_string_methods
  let text = "Hello World"
  print(text.upper())
  print(text.lower())
  print("Starts with Hello: " + str(text.starts_with("Hello")))
end

# 9. List metodları
function test_list_methods
  let fruits = ["apple", "banana"]
  fruits.append("orange")
  print("Fruits: " + str(fruits))
  
  fruits.insert(1, "grape")
  print("After insert: " + str(fruits))
end

# 10. Dict metodları
function test_dict_methods
  let person = {"name": "Ali", "age": "25"}
  print("Name: " + person.get("name", "Unknown"))
  
  person.set("city", "Istanbul")
  print("City: " + person.get("city"))
end

# 11. Async fonksiyon çağırma
async function async_task
  print("Async task başladı")
  await time_sleep(100)
  print("Async task bitti")
end

# 12. Coroutine (coop) çağırma
coop function counter(max)
  let i = 0
  while i < max
    yield i
    i = i + 1
  end
end

# 13. Class metodu çağırma
class Person
  function init(name)
    self.name = name
  end
  
  function greet
    print("Merhaba, ben " + self.name)
  end
  
  function introduce_to(other)
    print(self.name + " introduces to " + other)
  end
end

# 14. Static metot çağırma (class method)
class Math
  function square(x)
    return x * x
  end
  
  function cube(x)
    return x * x * x
  end
end

# 15. Higher-order fonksiyonlar
function apply_operation(numbers, operation): any
  let result = []
  for num in numbers
    result.append(operation(num))
  end
  return result
end

function double(x)
  return x * 2
end

# 16. Lambda/anonymous fonksiyon (eğer destekleniyorsa)
# function test_lambda
#   let square = function(x) return x * x end
#   print(square(5))
# end

# 17. Varargs fonksiyon çağırma (eğer destekleniyorsa)
# function sum_all(...args)
#   let total = 0
#   for arg in args
#     total = total + arg
#   end
#   return total
# end

# 18. Optional parametreler (eğer destekleniyorsa)
# function greet_optional(name, greeting = "Merhaba")
#   print(greeting + " " + name)
# end

# Ana test fonksiyonu
function main
  print("=== SKY Fonksiyon Çağırma Testleri ===")
  
  # Basit çağırma
  hello()
  
  # Parametreli çağırma
  greet("Dünya")
  
  # Return değeri ile çağırma
  let result = add(5, 3)
  print("5 + 3 = " + str(result))
  
  # Nested çağırma
  outer()
  
  # Recursive çağırma
  let fact = factorial(5)
  print("5! = " + str(fact))
  
  # Fonksiyon döndüren fonksiyon
  let doubler = get_multiplier(2)
  print("2 * 7 = " + str(doubler(7)))
  
  # Built-in fonksiyonlar
  test_builtins()
  
  # String metodları
  test_string_methods()
  
  # List metodları
  test_list_methods()
  
  # Dict metodları
  test_dict_methods()
  
  # Class metodu çağırma
  let person = Person("Ahmet")
  person.greet()
  person.introduce_to("Ayşe")
  
  # Static metot çağırma
  print("Square of 5: " + str(Math.square(5)))
  print("Cube of 3: " + str(Math.cube(3)))
  
  # Higher-order fonksiyonlar
  let numbers = [1, 2, 3, 4, 5]
  let doubled = apply_operation(numbers, double)
  print("Doubled numbers: " + str(doubled))
  
  print("=== Testler Tamamlandı ===")
end
